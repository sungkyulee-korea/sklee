name: Security AI Scan (stable)

on:
  push:
    branches: ['**']
  pull_request:
    types: [opened, synchronize, reopened]
  workflow_dispatch:

permissions:
  contents: read
  issues: write
  pull-requests: write

env:
  OPENAI_API_KEY: ${{ secrets.SKLEE_OPENAI_API_KEY }}
  MAX_POST_CHARS: "1800"
  MAX_FILES_TO_ANALYZE: "200"
  MAX_FILE_BYTES: "150000"

jobs:
  security-scan:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Python 3.10
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: Install semgrep & requests
        run: |
          python -m pip install --upgrade pip
          pip install semgrep requests || true

      - name: Run semgrep builtin
        id: run_semgrep_builtin
        run: |
          semgrep --config p/ci --json --output semgrep-results.json || true
          ls -la semgrep-results.json || true

      - name: Run semgrep custom if exists
        id: run_semgrep_custom
        run: |
          if [ -f .semgrep.yml ] || [ -f .semgrep.yaml ]; then
            if [ -f .semgrep.yml ]; then
              semgrep --config .semgrep.yml --json --output semgrep-custom.json || true
            else
              semgrep --config .semgrep.yaml --json --output semgrep-custom.json || true
            fi
            ls -la semgrep-custom.json || true
          else
            echo "no custom semgrep config"
          fi

      - name: Ensure scripts dir exists (debug)
        run: |
          echo "listing .github/scripts"
          ls -la .github || true
          ls -la .github/scripts || true

      - name: Run external security script if present (creates report.md)
        id: run_external
        run: |
          if [ -f .github/scripts/security_scan.py ]; then
            echo "Running external script: .github/scripts/security_scan.py"
            python .github/scripts/security_scan.py || echo "external script failed but continuing"
          else
            echo "No external script found - generating fallback report.md"
            printf "# 자동 fallback 보안 리포트\n\n- 외부 스크립트 없음. Semgrep 결과를 참고하세요.\n\n" > report.md
            if [ -f semgrep-results.json ]; then
              echo "Semgrep results exist; summarizing minimal info..."
              jq -r '.results[] | "\(.path) : \(.start.line // "-") - \(.extra.message // .message // "no message")"' semgrep-results.json | head -n 30 >> report.md || true
            fi
            head -n 200 report.md > post_body_short.md || true
          fi

      - name: Debug - show generated files & sizes
        run: |
          echo "report.md:"
          ls -la report.md || true
          echo "report.md bytes:"
          wc -c report.md || true
          echo "post_body_short.md:"
          ls -la post_body_short.md || true
          if [ -f post_body_short.md ]; then echo "---- post_body_short.md content ----"; head -c 200 post_body_short.md || true; echo; fi
          echo "semgrep files:"
          ls -la semgrep-results.json semgrep-custom.json || true

      - name: Post result (PR comment or Issue)
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const shortPath = 'post_body_short.md';
            let body = null;
            if (fs.existsSync(shortPath)) {
              body = fs.readFileSync(shortPath, 'utf8');
            } else if (fs.existsSync('report.md')) {
              body = fs.readFileSync('report.md', 'utf8').slice(0, 1800);
            } else {
              body = "자동 리포트가 생성되지 않았습니다. 아티팩트를 확인하세요.";
            }
            const isPR = !!context.payload.pull_request;
            if (isPR) {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.payload.pull_request.number,
                body: `### 🤖 AI Security Review (자동 리포트)\n\n${body}\n\n_전체 리포트는 artifact로 보관됩니다._`
              });
              console.log("Posted PR comment");
            } else {
              await github.rest.issues.create({
                owner: context.repo.owner,
                repo: context.repo.repo,
                title: `[AI Security Scan] 자동 리포트 - ${new Date().toISOString().slice(0,10)}`,
                body: `브랜치: ${context.ref}\n\n${body}\n\n_전체 리포트는 artifact로 보관됩니다._`
              });
              console.log("Created issue with report");
            }

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: security-scan-artifacts
          path: |
            report.md
            post_body_short.md
            semgrep-results.json
            semgrep-custom.json
