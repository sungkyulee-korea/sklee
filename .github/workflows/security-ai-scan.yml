name: Security AI Scan (ChatGPT)

on:
  pull_request:
    types: [opened, synchronize, reopened]
  push:
    branches: ['**']   # 원하면 main만: ['main']

permissions:
  contents: read
  pull-requests: write
  issues: write

jobs:
  ai-security-scan:
    runs-on: ubuntu-latest
    env:
      # ← 저장소 Settings > Secrets and variables > Actions 에 등록한 이름과 일치해야 합니다.
      OPENAI_API_KEY: ${{ secrets.SKLEE_OPENAI_API_KEY }}
      MAX_DIFF_CHARS: 90000

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      # 변경 파일/DIFF 추출 (안정적)
      - name: Get changed files & diff (PR or push)
        id: changed
        uses: actions/github-script@v7
        with:
          script: |
            const isPR = !!context.payload.pull_request;
            let diff = '';
            let files = [];

            if (isPR) {
              const prNumber = context.payload.pull_request.number;
              const list = await github.rest.pulls.listFiles({
                owner: context.repo.owner,
                repo: context.repo.repo,
                pull_number: prNumber,
                per_page: 100
              });
              files = list.data.map(f => f.filename);

              const diffResp = await github.request(
                "GET /repos/{owner}/{repo}/pulls/{pull_number}",
                {
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  pull_number: prNumber,
                  mediaType: { format: "diff" }
                }
              );
              diff = diffResp.data || '';
            } else {
              const before = context.payload.before;
              const after  = context.payload.after;

              if (before && after && before !== '0000000000000000000000000000000000000000') {
                const comp = await github.rest.repos.compareCommits({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  base: before,
                  head: after
                });
                files = (comp.data.files || []).map(f => f.filename);
                diff = (comp.data.files || []).map(f =>
                  `--- ${f.filename}\n${f.patch || '[binary or no patch]'}\n`
                ).join("\n");
              } else {
                const tree = await github.rest.git.getTree({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  tree_sha: context.sha,
                  recursive: "1"
                }).catch(()=>({data:{tree:[]}}));
                files = (tree.data.tree || []).map(t => t.path).slice(0, 100);
                diff = '';
              }
            }

            const maxChars = parseInt(process.env.MAX_DIFF_CHARS || '90000', 10);
            if (diff.length > maxChars) diff = diff.slice(0, maxChars) + "\n\n[...diff truncated]";
            core.setOutput("files", files.join("\n"));
            core.setOutput("diff", diff);

      # OpenAI 호출을 JS에서 직접 수행(쉘/따옴표 문제 제거)
      - name: Call OpenAI via github-script (robust)
        id: call_openai
        uses: actions/github-script@v7
        env:
          FILES: ${{ steps.changed.outputs.files }}
          DIFF:  ${{ steps.changed.outputs.diff }}
          OPENAI_API_KEY: ${{ env.OPENAI_API_KEY }}
        with:
          script: |
            const fs = require('fs');

            const files = process.env.FILES || '';
            const diff  = process.env.DIFF  || '';
            const apiKey = process.env.OPENAI_API_KEY || '';

            let out = '';
            if (!apiKey) {
              out = 'ERROR: OPENAI_API_KEY is empty';
            } else {
              const body = {
                model: "gpt-4o-mini",   // 필요 시 다른 모델로 교체 가능
                messages: [
                  { role: "system", content: "You are a concise, security-focused code reviewer." },
                  { role: "user", content:
                      "아래 변경사항을 보안 관점에서 점검하세요.\n" +
                      "응답 형식:\n" +
                      "Overall: (Block | Manual review | Low)\n" +
                      "Items: filename:line (severity) - short_desc - one-line fix\n\n" +
                      "FILES:\n" + files + "\n\nDIFF:\n" + diff
                  }
                ],
                max_tokens: 1000,
                temperature: 0
              };

              try {
                const resp = await fetch("https://api.openai.com/v1/chat/completions", {
                  method: "POST",
                  headers: {
                    "Authorization": `Bearer ${apiKey}`,
                    "Content-Type": "application/json"
                  },
                  body: JSON.stringify(body)
                });

                if (resp.ok) {
                  const j = await resp.json();
                  out = (j.choices?.[0]?.message?.content) || "No summary generated.";
                } else {
                  const t = await resp.text();
                  out = `[OpenAI error ${resp.status}]\n` + t.slice(0, 2000);
                }
              } catch (e) {
                out = 'Fetch failed: ' + String(e);
              }
            }

            fs.writeFileSync('ai_summary.txt', out);

      # 결과를 PR 코멘트 또는 Issue로 게시
      - name: Post result (PR comment or Issue)
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const body = fs.existsSync('ai_summary.txt')
              ? fs.readFileSync('ai_summary.txt','utf8')
              : 'No summary.';
            const isPR = !!context.payload.pull_request;

            if (isPR) {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.payload.pull_request.number,
                body: `### 🤖 AI Security Review (초안)\n\n${body}\n\n_자동 생성 — 담당자 검토 필수_`
              });
            } else {
              await github.rest.issues.create({
                owner: context.repo.owner,
                repo: context.repo.repo,
                title: `[AI Security Scan] 자동 리포트 - ${new Date().toISOString().slice(0,10)}`,
                body: `브랜치: ${context.ref}\n\n${body}\n\n_자동 생성 리포트_`
              });
            }
