name: Security AI Scan (robust + debug)

on:
  push:
    branches: ['**']
  pull_request:
    types: [opened, synchronize, reopened]
  workflow_dispatch:

permissions:
  contents: read
  issues: write
  pull-requests: write

jobs:
  security-scan:
    runs-on: ubuntu-latest
    env:
      MAX_DIFF_CHARS: "90000"

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Debug: print GitHub event info
        run: |
          echo "GITHUB_EVENT_NAME=$GITHUB_EVENT_NAME"
          echo "GITHUB_REF=$GITHUB_REF"
          echo "GITHUB_SHA=$GITHUB_SHA"
          echo "GITHUB_ACTOR=$GITHUB_ACTOR"
          echo "GITHUB_WORKFLOW=$GITHUB_WORKFLOW"
          echo "GITHUB_EVENT_PATH=$GITHUB_EVENT_PATH"
          echo "---- event payload (first 200 lines) ----"
          if [ -f "$GITHUB_EVENT_PATH" ]; then
            sed -n '1,200p' "$GITHUB_EVENT_PATH" || true
          else
            echo "No event payload file at $GITHUB_EVENT_PATH"
          fi

      - name: Setup Python 3.10
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: Install semgrep and deps
        run: |
          python -m pip install --upgrade pip
          pip install semgrep requests

      - name: Run semgrep (builtin rules)
        run: |
          semgrep --config p/ci --json --output semgrep-results.json || true
          echo "semgrep builtin saved to semgrep-results.json"

      - name: Run semgrep (repo custom rules, if present)
        run: |
          if [ -d ".semgrep" ]; then
            semgrep --config .semgrep --json --output semgrep-custom.json || true
            echo "semgrep custom saved to semgrep-custom.json"
          else
            echo ".semgrep directory not found - skipping custom rules"
          fi

      - name: Run external security script (if present) OR create fallback report
        id: run_external
        run: |
          echo "Listing .github/scripts"
          ls -la .github/scripts || true

          if [ -f .github/scripts/security_scan.py ]; then
            echo "Found .github/scripts/security_scan.py - executing"
            python .github/scripts/security_scan.py || true
            echo "external script completed"
          else
            echo "No external script - creating fallback report from semgrep outputs"
            python - <<'PY'
import json, os
out_lines = []
# load results from possible files
files = ['semgrep-custom.json', 'semgrep-results.json']
results = []
for f in files:
    if os.path.exists(f):
        try:
            j = json.load(open(f, encoding='utf8'))
            if isinstance(j, dict):
                res = j.get('results', [])
                if isinstance(res, list):
                    results.extend(res)
        except Exception:
            pass

out_lines.append("# 🤖 AI Security Review (자동 리포트)")
out_lines.append("")
if results:
    out_lines.append("## 전체 판단: 취약점 탐지 (자동분석)")
    out_lines.append("")
    out_lines.append("### 발견 항목:")
    for r in results[:200]:
        path = r.get('path') or r.get('extra', {}).get('metadata', {}).get('file', '-')
        extra = r.get('extra', {})
        msg = extra.get('message') or r.get('message') or ''
        sev = extra.get('severity', '')
        line = '-'
        start = r.get('start')
        if isinstance(start, dict):
            line = start.get('line', '-')
        elif start is not None:
            line = str(start)
        out_lines.append(f"- {path}:{line} ({sev}) - {msg}")
    out_lines.append("")
    out_lines.append("## 권고(간단)")
    out_lines.append("- 탐지된 항목을 바탕으로 해당 라인에서 안전한 API(PreparedStatement, 파라미터 바인딩 등)를 사용하거나 입력 검증/출력 인코딩을 적용하세요.")
else:
    out_lines.append("## 전체 판단: 취약점 없음 (자동분석)")
    out_lines.append("")
    out_lines.append("- Semgrep 기본/커스텀 룰에서 취약점이 감지되지 않았습니다.")
    out_lines.append("- 자동분석은 한계가 있으므로 중요 로직은 수동 검토 권장.")

out_lines.append("")
out_lines.append("_자동 생성 리포트 — 담당자 검토 필요_")

with open('report.md', 'w', encoding='utf8') as fw:
    fw.write('\n'.join(out_lines))
print("report.md created")
PY
          fi

      - name: Debug - print generated report (first 200 lines)
        run: |
          echo "=== report.md preview ==="
          if [ -f report.md ]; then
            sed -n '1,200p' report.md || true
          else
            echo "report.md not found"
          fi

      - name: Post result (PR comment or create Issue on push)
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const path = 'report.md';
            const report = fs.existsSync(path) ? fs.readFileSync(path,'utf8') : null;
            const isPR = !!context.payload.pull_request;
            if (isPR) {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.payload.pull_request.number,
                body: `### 🤖 AI Security Review (자동 리포트)\n\n${report || 'No report generated.'}\n\n_자동 생성 — 담당자 검토 필요_`
              });
            } else {
              await github.rest.issues.create({
                owner: context.repo.owner,
                repo: context.repo.repo,
                title: `[AI Security Scan] 자동 리포트 - ${new Date().toISOString().slice(0,10)}`,
                body: `브랜치: ${context.ref}\n\n${report || 'No report generated.'}\n\n_자동 생성 리포트_`
              });
            }
            console.log("Posted report (PR? " + (isPR ? "yes" : "no") + ")")

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: security-scan-artifacts
          path: |
            semgrep-results.json
            semgrep-custom.json
            report.md
