name: Security AI Scan (ChatGPT)

on:
  pull_request:
    types: [opened, synchronize, reopened]
  push:
    branches:
      - '**'

permissions:
  contents: read
  pull-requests: write
  issues: write

jobs:
  ai-security-scan:
    runs-on: ubuntu-latest
    env:
      OPENAI_API_KEY: ${{ secrets.SKLEE_OPENAI_API_KEY }}
      MAX_DIFF_CHARS: 90000

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Install jq
        run: |
          sudo apt-get update
          sudo apt-get install -y jq

      - name: Get changed files & diff (PR or push)
        id: changed
        uses: actions/github-script@v7
        with:
          script: |
            const isPR = !!context.payload.pull_request;
            let diff = '';
            let files = [];

            if (isPR) {
              const prNumber = context.payload.pull_request.number;
              const list = await github.rest.pulls.listFiles({
                owner: context.repo.owner,
                repo: context.repo.repo,
                pull_number: prNumber,
                per_page: 100
              });
              files = list.data.map(f => f.filename);
              const diffResp = await github.request(
                "GET /repos/{owner}/{repo}/pulls/{pull_number}",
                {
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  pull_number: prNumber,
                  mediaType: { format: "diff" }
                }
              );
              diff = diffResp.data || '';
            } else {
              const before = context.payload.before;
              const after = context.payload.after;
              if (before && after && before !== '0000000000000000000000000000000000000000') {
                const comp = await github.rest.repos.compareCommits({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  base: before,
                  head: after
                });
                files = (comp.data.files || []).map(f => f.filename);
                diff = (comp.data.files || []).map(f =>
                  `--- ${f.filename}\n${f.patch || '[binary or no patch]' }\n`
                ).join("\n");
              } else {
                const tree = await github.rest.git.getTree({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  tree_sha: context.sha,
                  recursive: "1"
                }).catch(()=>({data:{tree:[]}}));
                files = (tree.data.tree || []).map(t => t.path).slice(0, 100);
                diff = '';
              }
            }

            const maxChars = parseInt(process.env.MAX_DIFF_CHARS || '90000', 10);
            if (diff.length > maxChars) diff = diff.slice(0, maxChars) + "\n\n[...diff truncated]";

            core.setOutput("files", files.join("\n"));
            core.setOutput("diff", diff);

      - name: Build OpenAI request JSON (safe)
        run: |
          printf "%s" "${{ steps.changed.outputs.files }}" > files.txt
          printf "%s" "${{ steps.changed.outputs.diff }}"  > diff.txt

          # jq로 요청 바디를 안전하게 구성 (YAML 따옴표 충돌 방지)
          jq -n \
            --arg files "$(cat files.txt)" \
            --arg diff  "$(cat diff.txt)" \
            '{
              model: "gpt-4o-mini",
              messages: [
                { "role":"system", "content":"You are a concise, security-focused code reviewer."},
                { "role":"user",
                  "content": ("Analyze the code changes.\n\nFILES:\n" + $files + "\n\nDIFF:\n" + $diff)
                }
              ],
              max_tokens: 1000,
              temperature: 0
            }' > request.json

      - name: Call OpenAI (ChatGPT) for security summary
        id: call_openai
        run: |
          curl -sS https://api.openai.com/v1/chat/completions \
            -H "Authorization: Bearer ${OPENAI_API_KEY}" \
            -H "Content-Type: application/json" \
            -d @request.json > openai_response.json

          # 응답에서 요약만 추출 (없으면 빈 파일)
          jq -r '.choices[0].message.content // empty' openai_response.json > ai_summary.txt || true
          echo "---- AI SUMMARY (preview) ----"
          head -n 50 ai_summary.txt || true

      - name: Post result (comment on PR or create issue on push)
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const body = fs.existsSync('ai_summary.txt') ? fs.readFileSync('ai_summary.txt','utf8') : 'No summary generated.';
            const isPR = !!context.payload.pull_request;

            if (isPR) {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.payload.pull_request.number,
                body: `### 🤖 AI Security Review (초안)\n\n${body}\n\n> _자동 생성 결과 — 담당자 검토 필요_`
              });
            } else {
              await github.rest.issues.create({
                owner: context.repo.owner,
                repo: context.repo.repo,
                title: `[AI Security Scan] 자동 리포트 - ${new Date().toISOString().slice(0,10)}`,
                body: `### 🤖 AI Security Review (push)\n\n브랜치: ${context.ref}\n\n${body}\n\n> _자동 생성 리포트_`
              });
            }
