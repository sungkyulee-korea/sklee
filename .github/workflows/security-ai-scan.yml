name: Security AI Scan (robust + debug)

# Trigger on push, PR and manual
on:
  push:
    branches: ['**']
  pull_request:
    types: [opened, synchronize, reopened]
  workflow_dispatch:

permissions:
  contents: read
  issues: write
  pull-requests: write

jobs:
  security-scan:
    runs-on: ubuntu-latest
    env:
      MAX_DIFF_CHARS: "90000"

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Debug: print GitHub event info
        run: |
          echo "GITHUB_EVENT_NAME=$GITHUB_EVENT_NAME"
          echo "GITHUB_REF=$GITHUB_REF"
          echo "GITHUB_SHA=$GITHUB_SHA"
          echo "GITHUB_ACTOR=$GITHUB_ACTOR"
          echo "GITHUB_WORKFLOW=$GITHUB_WORKFLOW"
          echo "GITHUB_EVENT_PATH=$GITHUB_EVENT_PATH"
          echo "---- event payload (first 200 lines) ----"
          if [ -f "$GITHUB_EVENT_PATH" ]; then
            sed -n '1,200p' "$GITHUB_EVENT_PATH" || true
          else
            echo "No event payload file at $GITHUB_EVENT_PATH"
          fi

      - name: Setup Python 3.10
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: Install semgrep and deps
        run: |
          python -m pip install --upgrade pip
          pip install semgrep requests

      - name: Run semgrep (builtin rules)
        run: |
          # Run baseline (public ci rules) and save results
          semgrep --config p/ci --json --output semgrep-results.json || true
          echo "Saved semgrep-results.json (builtin)"

      - name: Run semgrep (repo custom rules, if any)
        run: |
          if [ -d ".semgrep" ]; then
            semgrep --config .semgrep --json --output semgrep-custom.json || true
            echo "Saved semgrep-custom.json (repo .semgrep rules)"
            ls -la semgrep-custom.json || true
          else
            echo ".semgrep directory not found, skipping custom semgrep rules"
          fi

      - name: Run external security script (if present) OR create fallback report
        id: run_external
        run: |
          echo "----- START external security script step -----"
          echo "Listing .github/scripts directory (if present):"
          ls -la .github/scripts || true

          if [ -f .github/scripts/security_scan.py ]; then
            echo "security_scan.py FOUND - running..."
            python .github/scripts/security_scan.py || true
            RC=$?
            echo "security_scan.py exit code: $RC"
          else
            echo "security_scan.py not found — creating fallback report from semgrep JSON results"
            python - <<'PY'
import json, os, sys
out = []
had = False
def add(s=''):
    out.append(s)
# Try custom semgrep first, then builtin
files = ['semgrep-custom.json','semgrep-results.json']
results = []
for f in files:
    if os.path.exists(f):
        try:
            j = json.load(open(f,encoding='utf8'))
            res = j.get('results') if isinstance(j, dict) else []
            if isinstance(res, list) and res:
                results.extend(res)
        except Exception:
            pass

add("# 🤖 AI Security Review (자동 리포트)")
add("")
if results:
    add("## 전체 판단: 취약점 탐지 (자동분석)")
    add("")
    add("### 발견 항목:")
    for r in results[:200]:
        path = r.get('path') or r.get('extra',{}).get('metadata',{}).get('file','-')
        msg = r.get('extra',{}).get('message') or r.get('message') or ''
        sev = r.get('extra',{}).get('severity','')
        line = '-'
        start = r.get('start')
        if isinstance(start, dict):
            line = start.get('line','-')
        elif start is not None:
            line = start
        add(f"- {path}:{line} ({sev}) - {msg}")
    add("")
    add("## 권고(간단)")
    add("- 자동탐지 항목을 참고하여 해당 라인에서 PreparedStatement/파라미터 바인딩, 입력 검증, 출력 인코딩 등을 적용하세요.")
else:
    add("## 전체 판단: 취약점 없음 (자동분석)")
    add("")
    add("- Semgrep 기본/커스텀 룰에서 취약점이 감지되지 않았습니다.")
    add("- 자동분석은 한계가 있으므로 중요 로직은 수동 검토 권장.")

add("")
add("_자동 생성 리포트 — 담당자 검토 필요_")

with open('report.md','w',encoding='utf8') as fw:
    fw.write('\n'.join(out))
print("report.md created; files_count: 1")
PY
          fi
          echo "----- END external security script step -----"

      - name: Debug - print generated report (first 200 lines)
        run: |
          echo "=== report.md preview ==="
          if [ -f report.md ]; then
            sed -n '1,200p' report.md || true
          else
            echo "report.md not found"
          fi

      - name: Post result (PR comment or create Issue on push)
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const path = 'report.md';
            const report = fs.existsSync(path) ? fs.readFileSync(path,'utf8') : null;
            const isPR = !!context.payload.pull_request;
            // If PR, post comment under PR; otherwise create an issue
            if (isPR) {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.payload.pull_request.number,
                body: `### 🤖 AI Security Review (자동 리포트)\n\n${report || 'No report generated.'}\n\n_자동 생성 — 담당자 검토 필요_`
              });
            } else {
              await github.rest.issues.create({
                owner: context.repo.owner,
                repo: context.repo.repo,
                title: `[AI Security Scan] 자동 리포트 - ${new Date().toISOString().slice(0,10)}`,
                body: `브랜치: ${context.ref}\n\n${report || 'No report generated.'}\n\n_자동 생성 리포트_`
              });
            }
            // Output a short summary to the job log
            console.log("Posted report (PR? " + (isPR? "yes":"no") + ")");
      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: security-scan-artifacts
          path: |
            semgrep-results.json
            semgrep-custom.json
            report.md
