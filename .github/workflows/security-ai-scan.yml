name: Security AI Scan (unified post)

on:
  push:
    branches: ['**']
  pull_request:
    types: [opened, synchronize, reopened]
  workflow_dispatch:

permissions:
  contents: read
  issues: write
  pull-requests: write

env:
  OPENAI_API_KEY: ${{ secrets.SKLEE_OPENAI_API_KEY }}
  MAX_POST_CHARS: 1800
  MAX_FILES_TO_ANALYZE: "200"
  MAX_FILE_BYTES: "150000"

jobs:
  security-scan:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Python 3.x
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: Install semgrep & requests
        run: |
          python -m pip install --upgrade pip
          pip install semgrep requests || true

      - name: Run semgrep builtin
        id: run_semgrep_builtin
        run: |
          semgrep --config p/ci --json --output semgrep-results.json || true
          ls -la semgrep-results.json || true

      - name: Run semgrep custom if exists
        id: run_semgrep_custom
        run: |
          if [ -f .semgrep.yml ] || [ -f .semgrep.yaml ]; then
            semgrep --config .semgrep.yml --json --output semgrep-custom.json || true
            ls -la semgrep-custom.json || true
          else
            echo "no custom semgrep config"
          fi

      - name: Run external security script (if present) or make fallback report
        id: run_external
        run: |
          echo "Listing .github/scripts:"
          ls -la .github/scripts || true

          if [ -f .github/scripts/security_scan.py ]; then
            echo "Running external script..."
            python .github/scripts/security_scan.py || echo "external script failed but continue"
          else
            echo "No external script. Creating fallback report.md from semgrep outputs."
            python - <<'PY'
import json,os,sys
outs = []
results = []
for f in ("semgrep-custom.json","semgrep-results.json"):
    if os.path.exists(f):
        try:
            j = json.load(open(f,"r",encoding="utf8"))
            if isinstance(j,dict) and "results" in j:
                results += j.get("results",[])
        except Exception:
            pass
lines = ["# ÏûêÎèô Î≥¥Ïïà Î¶¨Ìè¨Ìä∏ (Semgrep Ï¥àÏïà)",""]
if results:
    lines.append("## Î∞úÍ≤¨ Ìï≠Î™© (ÏöîÏïΩ)")
    for r in results[:200]:
        path = r.get('path') or r.get('extra',{}).get('metadata',{}).get('file','-')
        extra = r.get('extra',{}) or {}
        msg = extra.get('message') or r.get('message','')
        start = '-'
        if isinstance(r.get('start'),dict):
            start = r.get('start').get('line','-')
        else:
            start = r.get('start','-')
        sev = extra.get('severity','UNKNOWN')
        lines.append(f"- {path}:{start} [{sev}] {msg}")
else:
    lines.append("- Semgrep: ÌÉêÏßÄ ÏóÜÏùå (Í∏∞Î≥∏/Ïª§Ïä§ÌÖÄ Î£∞ Í∏∞Ï§Ä).")
lines.append("")
lines.append("_Ï†ÑÏ≤¥ Î¶¨Ìè¨Ìä∏Îäî artifactÎ°ú Î≥¥Í¥ÄÎê©ÎãàÎã§._")
open("report.md","w",encoding="utf8").write("\n".join(lines))
print("report.md created")
PY
          fi

      - name: Debug list and sizes
        run: |
          echo "report.md exists?"
          ls -la report.md || true
          echo "size (bytes):"
          wc -c report.md || true
          echo "semgrep files:"
          ls -la semgrep-results.json semgrep-custom.json || true

      - name: Prepare short summary
        id: prepare_short
        run: |
          SHORT=post_body_short.md
          if [ -f report.md ]; then
            head -n 400 report.md > tmp_head.md || true
            # truncate to MAX_POST_CHARS bytes
            dd if=tmp_head.md of=$SHORT bs=1 count=${{ env.MAX_POST_CHARS }} status=none || true
            echo "Prepared $SHORT ($(wc -c < $SHORT) bytes)"
          else
            echo "ÏûêÎèô Î¶¨Ìè¨Ìä∏Í∞Ä ÏÉùÏÑ±ÎêòÏßÄ ÏïäÏïòÏäµÎãàÎã§." > $SHORT
          fi
          echo "post_size=$(wc -c < $SHORT || true)" >> $GITHUB_OUTPUT

      - name: Post short summary (Issue on push / Comment on PR)
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const shortPath = 'post_body_short.md';
            const short = fs.existsSync(shortPath) ? fs.readFileSync(shortPath,'utf8') : 'No short body';
            const isPR = !!context.payload.pull_request;
            const ref = context.ref || '';
            try {
              if (isPR) {
                await github.rest.issues.createComment({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  issue_number: context.payload.pull_request.number,
                  body: `### ü§ñ AI Security Review (ÏöîÏïΩ)\n\n${short}\n\n_Ï†ÑÏ≤¥ Î¶¨Ìè¨Ìä∏Îäî artifactÎ°ú Î≥¥Í¥ÄÎê©ÎãàÎã§._`
                });
                console.log("Posted PR comment");
              } else {
                const title = `[AI Security Scan] ÏûêÎèô Î¶¨Ìè¨Ìä∏ - ${new Date().toISOString().slice(0,10)} (${ref})`;
                await github.rest.issues.create({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  title: title,
                  body: `Î∏åÎûúÏπò: ${ref}\n\n${short}\n\n(Ï†ÑÏ≤¥ Î¶¨Ìè¨Ìä∏Îäî artifactÏóê Î≥¥Í¥ÄÎê©ÎãàÎã§.)`
                });
                console.log("Created issue (push)");
              }
            } catch(e) {
              console.log("Failed posting report:", String(e));
            }

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: security-scan-artifacts
          path: |
            report.md
            semgrep-results.json
            semgrep-custom.json
            post_body_short.md
          if-no-files-found: ignore
