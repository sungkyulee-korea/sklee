name: Security AI Scan (robust + debug + truncate-safe post)

on:
  push:
    branches: ['**']
  pull_request:
    types: [opened, synchronize, reopened]
  workflow_dispatch:

permissions:
  contents: read
  issues: write
  pull-requests: write

env:
  OPENAI_MODEL: "gpt-4o-mini"
  MAX_FILE_BYTES: "150000"
  MAX_FILES_TO_ANALYZE: "200"

jobs:
  security-scan:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Python 3.10
        uses: actions/setup-python@v4
        with:
          python-version: "3.10"

      - name: Install dependencies (semgrep, requests)
        run: |
          python -m pip install --upgrade pip
          pip install semgrep requests

      - name: Run semgrep (builtin + custom if exists)
        run: |
          echo "Running semgrep..."
          CUSTOM=".semgrep/java-sqli.yml"
          if [ -f "$CUSTOM" ]; then
            echo "Using custom semgrep rules: $CUSTOM"
            semgrep --config p/ci,"$CUSTOM" --json --output semgrep-results.json || true
          else
            semgrep --config p/ci --json --output semgrep-results.json || true
          fi
          echo "semgrep exit code: $?"
          echo "semgrep-results.json (head):"
          if [ -f semgrep-results.json ]; then head -n 200 semgrep-results.json || true; else echo "(no semgrep-results.json)"; fi

      - name: Run security script to generate report.md
        run: |
          echo "Running security_scan.py (will always produce report.md)"
          python .github/scripts/security_scan.py
        env:
          OPENAI_API_KEY: ${{ secrets.SKLEE_OPENAI_API_KEY }}
          OPENAI_MODEL: ${{ env.OPENAI_MODEL }}
          GITHUB_REPOSITORY: ${{ github.repository }}
          GITHUB_EVENT_PATH: ${{ github.event_path }}
          GITHUB_RUN_ID: ${{ github.run_id }}

      - name: Debug: show generated report (head)
        run: |
          echo "---- Files in workspace ----"
          ls -la | sed -n '1,200p'
          echo "---- report.md head ----"
          if [ -f report.md ]; then sed -n '1,200p' report.md; else echo "(no report.md)"; fi
          echo "---- ai_summary_structured.json head ----"
          if [ -f ai_summary_structured.json ]; then sed -n '1,200p' ai_summary_structured.json; else echo "(no ai_summary_structured.json)"; fi
          echo "---- semgrep-results.json head ----"
          if [ -f semgrep-results.json ]; then sed -n '1,200p' semgrep-results.json; else echo "(no semgrep-results.json)"; fi

      - name: Debug & Force-create issue (truncate-safe)
        if: ${{ always() }}
        env:
          GITHUB_API_URL: https://api.github.com
          REPORT_PATH: report.md
          ALT_REPORT: ai_report_openai.md
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          set -euo pipefail
          owner_repo="${GITHUB_REPOSITORY}"
          run_id="${GITHUB_RUN_ID:-}"
          echo "Repository: $owner_repo"
          echo "GITHUB_RUN_ID: ${run_id:-(none)}"
          echo "GITHUB_EVENT_NAME: ${GITHUB_EVENT_NAME:-(none)}"
          echo "GITHUB_EVENT_PATH: ${GITHUB_EVENT_PATH:-(none)}"

          # pick report text (truncate head)
          REPORT_TEXT=""
          if [ -f "$REPORT_PATH" ]; then
            echo "FOUND report: $REPORT_PATH (size=$(stat -c%s "$REPORT_PATH"))"
            REPORT_TEXT=$(sed -n '1,15000p' "$REPORT_PATH" || true)
          elif [ -f "$ALT_REPORT" ]; then
            echo "FOUND alt report: $ALT_REPORT (size=$(stat -c%s "$ALT_REPORT"))"
            REPORT_TEXT=$(sed -n '1,15000p' "$ALT_REPORT" || true)
          else
            echo "No report file found. Will post debug summary."
            REPORT_TEXT="No report file found. Workspace listing:\\n$(ls -la | sed 's/\"/\\\\\"/g' | awk '{printf \"%s\\n\",$0}')"
          fi

          TRUNC_LIMIT=30000
          SHORT_BODY="$(printf "%s" "$REPORT_TEXT" | tr -d '\r' | sed 's/"/\\"/g' | cut -c -${TRUNC_LIMIT})"
          ARTIFACT_LINK="https://github.com/${owner_repo}/actions/runs/${run_id}/artifacts"
          FOOTER="\n\n(Full report saved as an artifact for this run: ${ARTIFACT_LINK})"

          ISSUE_TITLE="[AI Security Scan] 자동 리포트 - $(date -I)"
          ISSUE_BODY="$(printf "%s\n\n%s" "$SHORT_BODY" "$FOOTER" | sed 's/"/\\"/g')"

          # detect PR number from event
          PR_NUM=""
          if [ -n "${GITHUB_EVENT_PATH:-}" ] && [ -f "${GITHUB_EVENT_PATH}" ]; then
            PR_NUM=$(python - <<'PY'
import json,sys
try:
  ev=json.load(open(sys.argv[1]))
  pr=ev.get("pull_request")
  if pr:
    print(pr.get("number",""))
  else:
    print("")
except:
  print("")
PY
 "${GITHUB_EVENT_PATH}" 2>/dev/null || true)
          fi
          echo "PR_NUM: ${PR_NUM:-(none)}"

          if [ -n "${PR_NUM}" ]; then
            echo "Posting as PR comment to #${PR_NUM}..."
            POST_URL="${GITHUB_API_URL}/repos/${owner_repo}/issues/${PR_NUM}/comments"
            JSON_PAYLOAD=$(printf '{"body":"%s"}' "${ISSUE_BODY}")
          else
            echo "Creating issue..."
            POST_URL="${GITHUB_API_URL}/repos/${owner_repo}/issues"
            JSON_PAYLOAD=$(printf '{"title":"%s","body":"%s"}' "${ISSUE_TITLE}" "${ISSUE_BODY}")
          fi

          resp=$(curl -sS -w "\n%{http_code}" -X POST \
            -H "Authorization: Bearer ${GITHUB_TOKEN}" \
            -H "Accept: application/vnd.github+json" \
            -H "Content-Type: application/json" \
            "${POST_URL}" -d "${JSON_PAYLOAD}" ) || true

          http_code=$(echo "$resp" | tail -n1)
          resp_body=$(echo "$resp" | sed '$d')
          echo "HTTP_CODE: $http_code"
          echo "RESPONSE_BODY (head):"
          echo "$resp_body" | sed -n '1,400p' || true

          if [ "$http_code" -ge 200 ] && [ "$http_code" -lt 300 ]; then
            echo "Post succeeded."
            echo "Artifact link (view when signed-in): ${ARTIFACT_LINK}"
          else
            echo "Post failed. See above response body for details."
            echo "Possible causes: Issues disabled (has_issues=false), GITHUB_TOKEN lacks permission, organization policy blocking, body/payload validation (too long or invalid chars)."
            exit 1
          fi

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: security-scan-artifacts
          path: |
            semgrep-results.json
            ai_summary_structured.json
            report.md
