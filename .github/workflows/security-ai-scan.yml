name: Security AI Scan (safe + debug)

on:
  push:
    branches: ['**']
  pull_request:
    types: [opened, synchronize, reopened]
  workflow_dispatch:

permissions:
  contents: read
  issues: write
  pull-requests: write

env:
  OPENAI_API_KEY: ${{ secrets.SKLEE_OPENAI_API_KEY }}
  MAX_FILE_BYTES: "150000"
  MAX_FILES_TO_ANALYZE: "200"

jobs:
  security-scan:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Python 3.10
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: Install dependencies (semgrep, requests)
        run: |
          python -m pip install --upgrade pip
          pip install semgrep requests

      - name: Run semgrep (builtin rules)
        run: |
          # run semgrep with default CI rules and also allow a local semgrep.yml if present
          if [ -f .semgrep.yml ]; then
            semgrep --config .semgrep.yml --json --output semgrep-results.json || true
          elif [ -f semgrep.yml ]; then
            semgrep --config semgrep.yml --json --output semgrep-results.json || true
          else
            semgrep --config p/ci --json --output semgrep-results.json || true
          fi
          echo "semgrep finished, results saved to semgrep-results.json (if any)"

      - name: Run external security script (if present)
        id: run_external
        run: |
          set -euo pipefail
          echo "----- START external security script step -----"
          echo "Listing .github/scripts directory (if present):"
          ls -la .github/scripts || true

          if [ -f .github/scripts/security_scan.py ]; then
            echo "Found .github/scripts/security_scan.py -> running it (exit code ignored)"
            python .github/scripts/security_scan.py || true
          else
            echo ".github/scripts/security_scan.py not found — generating fallback report from semgrep-results.json"
            python - <<'PY'
import json, os, sys
out = 'report.md'
lines = []
try:
    if os.path.exists('semgrep-results.json'):
        with open('semgrep-results.json','r',encoding='utf8') as f:
            data = json.load(f)
        results = data.get('results', []) if isinstance(data, dict) else []
    else:
        results = []

    lines.append("### AI Security Review (자동 리포트)")
    lines.append("")
    if results:
        lines.append("## Semgrep 발견 항목:")
        for r in results[:200]:
            # semgrep formats differ; try to extract path/line/message/severity
            path = r.get('path') or r.get('extra', {}).get('metadata', {}).get('file', '-')
            extra = r.get('extra', {})
            msg = extra.get('message') or r.get('message') or ''
            start = '-'
            if isinstance(r.get('start'), dict):
                start = r.get('start').get('line', '-')
            else:
                start = r.get('start', '-')
            sev = extra.get('severity', '')
            lines.append(f"- {path}:{start} [{sev}] {msg}")
    else:
        lines.append("- Semgrep: 문제 없음 (기본 룰).")

    lines.append("")
    lines.append("_자동 리포트 — 담당자 검토 필요_")
    with open(out, 'w', encoding='utf8') as fw:
        fw.write('\n'.join(lines))
    print('report.md created; files_count: 1')
except Exception as e:
    print('Failed to create fallback report:', e)
    sys.exit(0)
PY
          fi

          echo "----- END external security script step -----"

      # Debug + Force post: check report file + try to create a debug issue (always run, even on failure)
      - name: Debug & Force post issue (show repo info, report head, and API response)
        if: ${{ always() }}
        env:
          GITHUB_API_URL: https://api.github.com
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          set -euo pipefail

          echo "=== Debug start: repo, event info ==="
          echo "REPO=$GITHUB_REPOSITORY"
          echo "EVENT_NAME=$GITHUB_EVENT_NAME"
          if [ -n "${GITHUB_EVENT_PATH:-}" ] && [ -f "${GITHUB_EVENT_PATH}" ]; then
            echo "---- event payload (first 200 lines) ----"
            sed -n '1,200p' "${GITHUB_EVENT_PATH}" || true
          else
            echo "(no event payload file)"
          fi

          echo
          echo "=== Check report file ==="
          if [ -f "report.md" ]; then
            echo "report exists:"
            ls -lh "report.md" || true
            echo "---- head of report (first 200 lines) ----"
            sed -n '1,200p' "report.md" || true
          else
            echo "report.md NOT found"
          fi

          echo
          echo "=== Repo details (raw JSON) ==="
          curl -sS -H "Authorization: Bearer ${GITHUB_TOKEN}" -H "Accept: application/vnd.github+json" \
            "${GITHUB_API_URL}/repos/${GITHUB_REPOSITORY}" > repo_info.json || true
          echo "---- repo_info.json (head) ----"
          head -c 2000 repo_info.json || true
          echo

          echo "=== Try to create a temporary debug issue (will be created if possible) ==="
          TITLE="[DEBUG][AI Security Scan] 자동 리포트 - $(date -Iseconds)"
          if [ -f "report.md" ]; then
            BODY_RAW=$(sed -n '1,300p' report.md | sed 's/"/\\"/g' | sed ':a;N;$!ba;s/\n/\\n/g')
          else
            BODY_RAW="(no report file)"
          fi
          PAYLOAD=$(printf '{"title":"%s","body":"%s\n\n(자동 디버그 리포트)"}' "$TITLE" "$BODY_RAW")

          RESP_BODY_FILE="debug_issue_response.json"
          HTTP_CODE=$(curl -sS -o "$RESP_BODY_FILE" -w "%{http_code}" -X POST \
            -H "Authorization: Bearer ${GITHUB_TOKEN}" \
            -H "Accept: application/vnd.github+json" \
            -H "Content-Type: application/json" \
            "${GITHUB_API_URL}/repos/${GITHUB_REPOSITORY}/issues" \
            -d "$PAYLOAD" || true )

          echo "HTTP_CODE=${HTTP_CODE}"
          echo "---- response (head) ----"
          head -c 2000 "$RESP_BODY_FILE" || true
          echo "Saved response to $RESP_BODY_FILE"

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: security-scan-artifacts
          path: |
            semgrep-results.json
            report.md
            repo_info.json
            debug_issue_response.json

      - name: Post Setup Python (cleanup step placeholder)
        run: echo "Done."

