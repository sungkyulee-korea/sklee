name: Security AI Scan (safe + detailed)

on:
  workflow_dispatch:
  pull_request:
    types: [opened, synchronize, reopened]
  push:
    branches: ['**']

permissions:
  contents: read
  issues: write
  pull-requests: write

env:
  OPENAI_API_KEY: ${{ secrets.SKLEE_OPENAI_API_KEY }}
  MAX_FILE_BYTES: "150000"
  MAX_FILES_TO_ANALYZE: "200"

jobs:
  security-scan:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Python 3.10
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: Install dependencies (semgrep, requests)
        run: |
          python -m pip install --upgrade pip
          pip install semgrep requests

      - name: Run semgrep (builtin rules)
        run: |
          semgrep --config p/ci --json --output semgrep-results.json || true
          echo "semgrep finished, results saved to semgrep-results.json (if any)"

      - name: Generate fallback report from semgrep (creates report.md)
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const out = 'report.md';
            let lines = [];
            lines.push('### 자동 보안 리포트 (간단 요약)');
            lines.push('');
            if (fs.existsSync('semgrep-results.json')) {
              let data = {};
              try {
                const txt = fs.readFileSync('semgrep-results.json','utf8');
                data = JSON.parse(txt || '{}');
              } catch(e) {
                core.info('Failed to parse semgrep-results.json: ' + String(e));
                data = {};
              }
              const results = Array.isArray(data.results) ? data.results : [];
              if (results.length>0) {
                lines.push('#### Semgrep 발견 항목:');
                for (let i=0;i<Math.min(200,results.length);i++) {
                  const r = results[i];
                  const path = r.path || (r.extra && r.extra.metadata && r.extra.metadata.file) || '-';
                  const extra = r.extra || {};
                  const msg = extra.message || r.message || '';
                  let start = '-';
                  if (r.start && typeof r.start === 'object') start = r.start.line || '-';
                  else if (r.start) start = String(r.start);
                  const sev = extra.severity || '';
                  lines.push(`- ${path}:${start} [${sev}] ${msg}`);
                }
              } else {
                lines.push('- Semgrep: 문제 없음 (기본 룰).');
              }
            } else {
              lines.push('- Semgrep 결과 파일(semgrep-results.json)이 없습니다.');
            }
            lines.push('');
            lines.push('_자동 리포트 — 담당자 검토 필요_');
            fs.writeFileSync(out, lines.join('\\n'), {encoding:'utf8'});
            core.info('Fallback report.md created');

      - name: Run external security script (if present)
        id: run_script
        run: |
          echo "Listing .github/scripts (if present):"
          ls -la .github/scripts || true
          if [ -f .github/scripts/security_scan.py ]; then
            echo "security_scan.py FOUND - running..."
            python .github/scripts/security_scan.py
            echo "security_scan.py finished with exit code $?"
          else
            echo ".github/scripts/security_scan.py not found — using fallback report.md"
          fi

      - name: Post result (PR comment or create Issue on push)
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const path = 'report.md';
            const body = fs.existsSync(path) ? fs.readFileSync(path,'utf8') : 'No report generated.';
            const isPR = !!context.payload.pull_request;
            if (isPR) {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.payload.pull_request.number,
                body: `### 🤖 AI Security Review (자동 리포트)\n\n${body}\n\n_자동 생성 — 담당자 검토 필요_`
              });
              core.info('Posted report as PR comment');
            } else {
              await github.rest.issues.create({
                owner: context.repo.owner,
                repo: context.repo.repo,
                title: `[AI Security Scan] 자동 리포트 - ${new Date().toISOString().slice(0,10)}`,
                body: `브랜치: ${context.ref}\n\n${body}\n\n_자동 생성 리포트_`
              });
              core.info('Created issue with report');
            }

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: security-scan-artifacts
          path: |
            semgrep-results.json
            files_to_analyze.json
            files_content.json
            heuristics.json
            ai_summary_structured.json
            report.md
