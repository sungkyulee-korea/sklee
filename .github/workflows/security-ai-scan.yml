name: Security AI Scan (ChatGPT)

on:
  pull_request:
    types: [opened, synchronize, reopened]
  push:
    branches: ['**']

permissions:
  contents: read
  pull-requests: write
  issues: write

jobs:
  ai-security-scan:
    runs-on: ubuntu-latest
    env:
      OPENAI_API_KEY: ${{ secrets.SKLEE_OPENAI_API_KEY }}
      MAX_DIFF_CHARS: 90000

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Install jq
        run: |
          sudo apt-get update
          sudo apt-get install -y jq

      # 변경 파일/DIFF 추출 (JS는 github-script 안에서만 실행)
      - name: Get changed files & diff (PR or push)
        id: changed
        uses: actions/github-script@v7
        with:
          script: |
            const isPR = !!context.payload.pull_request;
            let diff = '';
            let files = [];

            if (isPR) {
              const prNumber = context.payload.pull_request.number;
              const list = await github.rest.pulls.listFiles({
                owner: context.repo.owner, repo: context.repo.repo,
                pull_number: prNumber, per_page: 100
              });
              files = list.data.map(f => f.filename);
              const diffResp = await github.request(
                "GET /repos/{owner}/{repo}/pulls/{pull_number}",
                { owner: context.repo.owner, repo: context.repo.repo,
                  pull_number: prNumber, mediaType: { format: "diff" } }
              );
              diff = diffResp.data || '';
            } else {
              const before = context.payload.before;
              const after  = context.payload.after;
              if (before && after && before !== '0000000000000000000000000000000000000000') {
                const comp = await github.rest.repos.compareCommits({
                  owner: context.repo.owner, repo: context.repo.repo,
                  base: before, head: after
                });
                files = (comp.data.files || []).map(f => f.filename);
                diff = (comp.data.files || []).map(f =>
                  `--- ${f.filename}\n${f.patch || '[binary or no patch]'}\n`
                ).join("\n");
              } else {
                const tree = await github.rest.git.getTree({
                  owner: context.repo.owner, repo: context.repo.repo,
                  tree_sha: context.sha, recursive: "1"
                }).catch(()=>({data:{tree:[]}}));
                files = (tree.data.tree || []).map(t => t.path).slice(0, 100);
                diff = '';
              }
            }

            const maxChars = parseInt(process.env.MAX_DIFF_CHARS || '90000', 10);
            if (diff.length > maxChars) diff = diff.slice(0, maxChars) + "\n\n[...diff truncated]";
            core.setOutput("files", files.join("\n"));
            core.setOutput("diff", diff);

      # 여기는 "쉘"만 사용 (JS 금지). 파일로 안전하게 넘김
      - name: Build OpenAI request JSON
        shell: bash
        run: |
          set -euo pipefail
          printf "%s" "${{ steps.changed.outputs.files }}" > files.txt
          printf "%s" "${{ steps.changed.outputs.diff }}"  > diff.txt

          # jq -Rs로 파일 내용을 "그대로" 읽어와 따옴표 충돌 제거
          FILES=$(jq -Rs . < files.txt)
          DIFF=$(jq -Rs . < diff.txt)

          jq -n --argjson files ${FILES} --argjson diff ${DIFF} '
          {
            model: "gpt-4o-mini",
            messages: [
              { "role":"system", "content":"You are a concise, security-focused code reviewer."},
              { "role":"user",
                "content":
                  ("Analyze the code changes.\n\nFILES:\n" + $files +
                   "\n\nDIFF:\n" + $diff +
                   "\n\nRespond in Korean with:\n" +
                   "Overall: (Block/Manual/Low)\n" +
                   "Items: filename:line (severity) - short_desc - one-line fix")
              }
            ],
            max_tokens: 1000,
            temperature: 0
          }' > request.json

          echo "request.json bytes: $(wc -c < request.json)"

      - name: Call OpenAI (tolerant; capture errors)
        id: call_openai
        shell: bash
        continue-on-error: true
        run: |
          set -euo pipefail
          if [ -z "${OPENAI_API_KEY:-}" ]; then
            echo "ERROR: OPENAI_API_KEY empty" > ai_summary.txt
            exit 0
          fi

          HTTP_CODE=$(curl -sS -o openai_response.json -w "%{http_code}" \
            https://api.openai.com/v1/chat/completions \
            -H "Authorization: Bearer ${OPENAI_API_KEY}" \
            -H "Content-Type: application/json" \
            --data-binary @request.json || echo "CURL_ERROR")

          echo "HTTP_CODE=${HTTP_CODE}"
          if [ "${HTTP_CODE}" = "CURL_ERROR" ]; then
            echo "curl failed" > ai_summary.txt
          elif [ "${HTTP_CODE}" -ge 200 ] && [ "${HTTP_CODE}" -lt 300 ]; then
            jq -r '.choices[0].message.content // empty' openai_response.json > ai_summary.txt
          else
            {
              echo "[OpenAI error ${HTTP_CODE}]"
              echo "---- response (first 2KB) ----"
              head -c 2000 openai_response.json
            } > ai_summary.txt
          fi
          echo "---- SUMMARY PREVIEW ----"
          head -n 60 ai_summary.txt || true

      - name: Post result (PR comment or Issue)
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const body = fs.existsSync('ai_summary.txt')
              ? fs.readFileSync('ai_summary.txt','utf8')
              : 'No summary.';
            const isPR = !!context.payload.pull_request;

            if (isPR) {
              await github.rest.issues.createComment({
                owner: context.repo.owner, repo: context.repo.repo,
                issue_number: context.payload.pull_request.number,
                body: `### 🤖 AI Security Review (디버그)\n\n${body}\n\n_자동 생성 결과 — 점검용_`
              });
            } else {
              await github.rest.issues.create({
                owner: context.repo.owner, repo: context.repo.repo,
                title: `[AI Security Scan] 디버그 리포트 - ${new Date().toISOString().slice(0,10)}`,
                body: `브랜치: ${context.ref}\n\n${body}\n\n_자동 생성 결과 — 점검용_`
              });
            }
